[[ch03_bitcoin_client]]
== Bitcoin Core: A Implementação de Referência

((("open source licenses")))((("Nakamoto, Satoshi")))Bitcoin é um projeto _open source_ e o código-fonte está disponível sob uma licença aberta (MIT), de download gratuito e uso para qualquer finalidade. Código aberto significa mais do que simplesmente usar de graça. Isso também significa que o bitcoin é desenvolvido por uma comunidade aberta de voluntários. No início, essa comunidade consistia apenas em Satoshi Nakamoto. Em 2016, o código-fonte do bitcoin tinha mais de 400 colaboradores com cerca de uma dúzia de desenvolvedores trabalhando no código quase em tempo integral e várias dezenas de outros em tempo parcial. Qualquer pessoa pode contribuir para o código&#x2014;incluindo você!


((("bitcoin whitepaper")))((("Satoshi client")))((("reference implementation", see="Bitcoin Core")))((("Bitcoin Core", "reference implementation")))Quando o bitcoin foi criado por Satoshi Nakamoto, o software foi concluído antes do whitepaper reproduzido em <<satoshi_whitepaper>>. Satoshi queria ter certeza de que funcionava antes de escrever sobre isso. Essa primeira implementação, então conhecida simplesmente como "Bitcoin" ou "cliente Satoshi", foi bastante modificada e aprimorada. Ele evoluiu para o que é conhecido como _Bitcoin Core_, para diferenciá-lo de outras implementações compatíveis. Bitcoin Core é a _referência de implementação_ do sistema bitcoin, o que significa que é a referência oficial sobre como cada parte da tecnologia deve ser implementada. Bitcoin Core implementa todos os aspectos do bitcoin, incluindo carteiras, um mecanismo de validação de transação e bloco e um nó de rede completo na rede bitcoin ponto-a-ponto.

[WARNING]
====
((("wallets", "best practices for")))((("bitcoin improvement proposals", "Mnemonic Code Words (BIP-39)")))((("bitcoin improvement proposals", "Hierarchical Deterministic Wallets (BIP-32/BIP-44)")))Mesmo que o Bitcoin Core inclua uma implementação de referência de uma carteira, ela não se destina a ser usada como uma carteira de produção para usuários ou aplicativos. Os desenvolvedores de aplicativos são aconselhados a construir carteiras usando padrões modernos, como BIP-39 e BIP-32 (veja <<mnemonic_code_words>> e <<hd_wallets>>). BIP significa _Bitcoin Improvement Proposal_ (_Proposta de Melhoria de Bitcoin_).
====

<<bitcoin_core_architecture>> mostra a arquitetura do Bitcoin Core.((("Bitcoin Core", "architecture")))

[[bitcoin_core_architecture]]
.Arquitetura Bitcoin Core (Fonte: Eric Lombrozo)
image::images/mbc2_0301.png["Bitcoin Core Architecture"]


=== Ambiente de Desenvolvimento de Bitcoin

((("development environment", "setup", see="Bitcoin Core")))Se você for um desenvolvedor, desejará configurar um ambiente de desenvolvimento com todas as ferramentas, bibliotecas e software de suporte para escrever aplicativos bitcoin. Neste capítulo altamente técnico, vamos percorrer esse processo passo a passo. Se o material se tornar muito denso (e você não estiver realmente configurando um ambiente de desenvolvimento), fique à vontade para pular para o próximo capítulo, que é menos técnico.

[[compiling_core]]
=== Compilando Bitcoin Core a partir do Código-Fonte

((("Bitcoin Core", "compiling from source code", id="BCsource03")))((("Bitcoin Core", "compiling from source code", "downloading")))((("code examples, obtaining and using")))O código-fonte do Bitcoin Core pode ser baixado como um arquivo ou clonando o repositório de origem oficial no GitHub.  ((("Bitcoin Core downloads")))Na https://bitcoincore.org/bin/[página de download Bitcoin Core], selecione a versão mais recente e baixe o arquivo compactado do código-fonte, por exemplo, +bitcoin-0.15.0.2.tar.gz+. ((("GitHub bitcoin page")))Como alternativa, use a linha de comando git para criar uma cópia local do código-fonte da https://github.com/bitcoin/bitcoin[página do bitcoin no GitHub].

[TIP]
====
((("$ symbol")))((("shell commands")))((("terminal applications")))Em muitos dos exemplos deste capítulo, usaremos a interface de linha de comando do sistema operacional (também conhecida como "shell"), acessada por meio de um aplicativo de "terminal". O shell exibirá um prompt; você digita um comando; e o shell responde com algum texto e um novo prompt para seu próximo comando. O prompt pode parecer diferente em seu sistema, mas nos exemplos a seguir ele é denotado por um símbolo +$+. Nos exemplos, ao ver o texto após um símbolo +$+, não digite o símbolo +$+, mas digite o comando imediatamente após ele e pressione Enter para executar o comando. Nos exemplos, as linhas abaixo de cada comando são as respostas do sistema operacional a esse comando. Ao ver o próximo prefixo +$+, você saberá que é um novo comando e deverá repetir o processo.
====

((("cloning source code")))((("source code, cloning", seealso="Bitcoin Core")))Neste exemplo, estamos usando o comando +git+ para criar uma cópia local ("clone") do código-fonte:

----
$ git clone https://github.com/bitcoin/bitcoin.git
Cloning into 'bitcoin'...
remote: Counting objects: 102071, done.
remote: Compressing objects: 100% (10/10), done.
Receiving objects: 100% (102071/102071), 86.38 MiB | 730.00 KiB/s, done.
remote: Total 102071 (delta 4), reused 5 (delta 1), pack-reused 102060
Resolving deltas: 100% (76168/76168), done.
Checking connectivity... done.
$
----

[TIP]
====
((("distributed version control systems")))Git é o sistema de controle de versão distribuído mais amplamente usado, uma parte essencial de qualquer kit de ferramentas de desenvolvedor de software. Você pode precisar instalar o comando +git+, ou uma interface gráfica de usuário para git, em seu sistema operacional, caso ainda não tenha.
====

Quando a operação de clonagem git for concluída, você terá uma cópia local completa do repositório de código-fonte no diretório _bitcoin_. Mude para este diretório digitando ++**cd bitcoin**++ no prompt:

----
$ cd bitcoin
----

==== Selecionando uma Versão do Bitcoin Core
((("Bitcoin Core", "compiling from source code", "version selection")))Por padrão, a cópia local será sincronizada com o código mais recente, que pode ser uma versão instável ou beta do bitcoin. Antes de compilar o código, selecione uma versão específica verificando uma _tag_ de lançamento. Isso sincronizará a cópia local com um snapshot específico do repositório de código identificado por uma tag de palavra-chave. As tags são usadas pelos desenvolvedores para marcar lançamentos específicos do código por número de versão. Primeiro, para encontrar as tags disponíveis, usamos o comando +git tag+:

----
$ git tag
v0.1.5
v0.1.6test1
v0.10.0
...
v0.11.2
v0.11.2rc1
v0.12.0rc1
v0.12.0rc2
...
----

A lista de tags mostra todas as versões lançadas do bitcoin. Por convenção, _candidatos de lançamento_, que são destinados a teste, têm o sufixo "rc". Versões estáveis ​​que podem ser executadas em sistemas de produção não têm sufixo. Na lista anterior, selecione o lançamento da versão mais recente, que no momento da escrita era v0.15.0. Para sincronizar o código local com esta versão, use o comando +git checkout+:

----
$ git checkout v0.15.0
HEAD is now at 3751912... Merge #11295: doc: Old fee_estimates.dat are discarded by 0.15.0
----

Você pode confirmar que tem a versão desejada "retirada" emitindo o comando +git status+:

----
$ git status
HEAD detached at v0.15.0
nothing to commit, working directory clean
----

==== Configurando o Bitcoin Core Build

((("Bitcoin Core", "compiling from source code", "build configuration")))((("documentation")))((("build documentation", seealso="Bitcoin Core")))O código-fonte inclui documentação, que pode ser encontrada em vários arquivos. Revise a documentação principal localizada em _README.md_ no diretório _bitcoin_ digitando ++**more README.md**++ no prompt e usando a barra de espaço para avançar para a próxima página. Neste capítulo, construiremos o cliente bitcoin de linha de comando, também conhecido como +bitcoind+ no Linux. Revise as instruções para compilar o cliente de linha de comando +bitcoind+ em sua plataforma digitando ++**more doc/build-unix.md**++. Instruções alternativas para macOS e Windows podem ser encontradas no diretório _doc_, como _build-osx.md_ ou _build-windows.md_, respectivamente.

Reveja cuidadosamente os pré-requisitos de construção, que estão na primeira parte da documentação de construção. Essas são bibliotecas que devem estar presentes em seu sistema antes de você começar a compilar bitcoin. Se esses pré-requisitos estiverem ausentes, o processo de construção falhará com um erro. Se isso acontecer porque você perdeu um pré-requisito, você pode instalá-lo e, em seguida, retomar o processo de construção de onde parou. Supondo que os pré-requisitos estejam instalados, você inicia o processo de construção gerando um conjunto de scripts de construção usando o script _autogen.sh_.

----
$ ./autogen.sh
...
glibtoolize: copying file 'build-aux/m4/libtool.m4'
glibtoolize: copying file 'build-aux/m4/ltoptions.m4'
glibtoolize: copying file 'build-aux/m4/ltsugar.m4'
glibtoolize: copying file 'build-aux/m4/ltversion.m4'
...
configure.ac:10: installing 'build-aux/compile'
configure.ac:5: installing 'build-aux/config.guess'
configure.ac:5: installing 'build-aux/config.sub'
configure.ac:9: installing 'build-aux/install-sh'
configure.ac:9: installing 'build-aux/missing'
Makefile.am: installing 'build-aux/depcomp'
...
----

O script _autogen.sh_ cria um conjunto de scripts de configuração automática que interrogará seu sistema para descobrir as configurações corretas e garantir que você tenha todas as bibliotecas necessárias para compilar o código. O mais importante deles é o script +configure+ que oferece várias opções diferentes para personalizar o processo de construção. Digite ++**./configure --help**++ para ver as várias opções:

----
$ ./configure --help
`configure' configures Bitcoin Core 0.15.0 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

...
Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]

  --enable-wallet         enable wallet (default is yes)

  --with-gui[=no|qt4|qt5|auto]
...
----

O script +configure+ permite que você habilite ou desabilite certos recursos do +bitcoind+ através do uso dos sinalizadores +--enable-FEATURE+ e +--disable-FEATURE+, onde pass:[<span class="keep-together"><code>FEATURE</code></span>] é substituído pelo nome do recurso, conforme listado na saída de ajuda. Neste capítulo, construiremos o cliente +bitcoind+ com todos os recursos padrão. Não usaremos os sinalizadores de configuração, mas você deve revisá-los para entender quais recursos opcionais fazem parte do cliente. Se você estiver em um ambiente acadêmico, as restrições do laboratório de informática podem exigir que você instale aplicativos em seu diretório inicial (por exemplo, usando +--prefix=$HOME+).

Aqui estão algumas opções úteis que substituem o comportamento padrão do script de configuração:

++++
<dl>
<dt><code>--prefix=$HOME</code></dt>
<dd><p>Isso substitui o local de instalação padrão (que é <em>/usr/local/</em>) para o executável resultante. Use <code>$HOME</code> para colocar tudo em seu diretório inicial ou em um caminho diferente.</p></dd>

<dt><code>--disable-wallet</code></dt>
<dd><p>Isso é usado para desabilitar a implementação da carteira de referência.</p></dd>

<dt><code>--with-incompatible-bdb</code></dt>
<dd><p>Se você estiver construindo uma carteira, permita o uso de uma versão incompatível da biblioteca Berkeley DB.</p></dd>

<dt><code>--with-gui=no</code></dt>
<dd><p>Não construa a interface gráfica do usuário, que requer a biblioteca Qt. Isso constrói um servidor e bitcoin de linha de comando apenas.</p></dd>
</dl>
++++

Em seguida, execute o script +configure+ para descobrir automaticamente todas as bibliotecas necessárias e crie um script de compilação personalizado para o seu sistema:

----
$ ./configure
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
...
[many pages of configuration tests follow]
...
$
----


Se tudo correr bem, o comando +configure+ terminará criando os scripts de construção personalizados que nos permitirão compilar +bitcoind+. Se houver alguma biblioteca ausente ou erros, o comando +configure+ terminará com um erro em vez de criar os scripts de construção. Se ocorrer um erro, provavelmente é devido a uma biblioteca ausente ou incompatível. Revise a documentação de construção novamente e certifique-se de instalar os pré-requisitos ausentes. Em seguida, execute +configure+ novamente e veja se isso corrige o erro.

==== Construindo os Executáveis ​​do Bitcoin

((("Bitcoin Core", "compiling from source code", "core executables")))((("core executables", seealso="Bitcoin Core")))A seguir, você compilará o código-fonte, um processo que pode levar até uma hora para ser concluído, dependendo da velocidade de sua CPU e da memória disponível. Durante o processo de compilação, você deve ver a saída a cada poucos segundos ou a cada poucos minutos, ou um erro se algo der errado. Se ocorrer um erro, ou o processo de compilação for interrompido, ele pode ser reiniciado a qualquer momento digitando +make+ novamente. Digite ++**make**++ para começar a compilar o aplicativo executável:

----
$ make
Making all in src
  CXX      crypto/libbitcoinconsensus_la-hmac_sha512.lo
  CXX      crypto/libbitcoinconsensus_la-ripemd160.lo
  CXX      crypto/libbitcoinconsensus_la-sha1.lo
  CXX      crypto/libbitcoinconsensus_la-sha256.lo
  CXX      crypto/libbitcoinconsensus_la-sha512.lo
  CXX      libbitcoinconsensus_la-hash.lo
  CXX      primitives/libbitcoinconsensus_la-transaction.lo
  CXX      libbitcoinconsensus_la-pubkey.lo
  CXX      script/libbitcoinconsensus_la-bitcoinconsensus.lo
  CXX      script/libbitcoinconsensus_la-interpreter.lo

[... many more compilation messages follow ...]

$
----

Em um sistema rápido com mais de uma CPU, você pode querer definir o número de trabalhos de compilação paralela. Por exemplo, +make -j 2+ usará dois núcleos se estiverem disponíveis. Se tudo correr bem, o Bitcoin Core agora está compilado. Você deve executar o conjunto de testes de unidade com +make check+ para garantir que as bibliotecas vinculadas não sejam quebradas de maneiras óbvias. A etapa final é instalar os vários executáveis ​​em seu sistema usando o comando +make install+. Pode ser solicitada sua senha de usuário, porque esta etapa requer privilégios administrativos:

----
$ make check && sudo make install
Password:
Making install in src
 ../build-aux/install-sh -c -d '/usr/local/lib'
libtool: install: /usr/bin/install -c bitcoind /usr/local/bin/bitcoind
libtool: install: /usr/bin/install -c bitcoin-cli /usr/local/bin/bitcoin-cli
libtool: install: /usr/bin/install -c bitcoin-tx /usr/local/bin/bitcoin-tx
...
$
----

((("", startref="BCsource03")))A instalação padrão do +bitcoind+ o coloca em _/usr/local/bin_. Você pode confirmar se o Bitcoin Core está instalado corretamente, solicitando ao sistema o caminho dos executáveis, da seguinte maneira:

----
$ which bitcoind
/usr/local/bin/bitcoind

$ which bitcoin-cli
/usr/local/bin/bitcoin-cli
----

=== Executando um Nó Bitcoin Core

((("Bitcoin Core", "running core nodes", id="BCnode03")))((("bitcoin nodes", "running core nodes", id="BNcore03")))A rede ponto-a-ponto do Bitcoin é composta de "nós" de rede, executados principalmente por voluntários e algumas das empresas que criam aplicativos bitcoin. Aqueles que executam nós de bitcoin têm uma visão direta e autorizada da blockchain de bitcoin, com uma cópia local de todas as transações, validadas independentemente por seu próprio sistema. Ao executar um nó, você não precisa depender de terceiros para validar uma transação. Além disso, ao executar um nó bitcoin, você contribui para a rede bitcoin, tornando-a mais robusta.

A execução de um nó, entretanto, requer um sistema permanentemente conectado com recursos suficientes para processar todas as transações bitcoin. Dependendo se você escolhe indexar todas as transações e manter uma cópia completa da blockchain, você também pode precisar de muito espaço em disco e RAM. No início de 2021, um nó de índice completo precisa de 2 GB de RAM e um mínimo de 360 ​​GB de espaço em disco (veja https://blockchain.info/charts/blocks-size[]). Os nós de bitcoin também transmitem e recebem transações e blocos de bitcoin, consumindo largura de banda da Internet. Se sua conexão com a Internet for limitada, tiver um limite de dados baixo ou for medida (cobrada pelo gigabit), você provavelmente não deve executar um nó de bitcoin nele ou executá-lo de uma forma que restrinja sua largura de banda (veja <<constrained_resources>>).

[TIP]
====
((("warnings and cautions", "core node resource requirements")))((("resource requirements")))O Bitcoin Core mantém uma cópia completa da blockchain por padrão, com todas as transações que já ocorreram na rede bitcoin desde seu início em 2009. Este conjunto de dados tem dezenas de gigabytes de tamanho e é baixado de forma incremental ao longo de vários dias ou semanas, dependendo do velocidade de sua CPU e conexão com a internet. O Bitcoin Core não será capaz de processar transações ou atualizar saldos de contas até que o conjunto de dados blockchain completo seja baixado. Certifique-se de ter espaço em disco, largura de banda e tempo suficientes para concluir a sincronização inicial. Você pode configurar o Bitcoin Core para reduzir o tamanho da blockchain descartando blocos antigos (veja <<constrained_resources>>), mas ainda fará o download de todo o conjunto de dados antes de descartar os dados.
====

Apesar desses requisitos de recursos, milhares de voluntários executam nós de bitcoin. Alguns estão rodando em sistemas tão simples como o Raspberry Pi (um computador de $35 USD do tamanho de um baralho de cartas). Muitos voluntários também executam nós de bitcoin em servidores alugados, geralmente alguma variante do Linux. Uma instância de _Virtual Private Server_ (VPS) ou _Cloud Computing Server_ pode ser usada para executar um nó de bitcoin. Esses servidores podem ser alugados por US $25 a US$ 50 por mês de uma variedade de provedores.

Por que você deseja executar um nó? Aqui estão alguns dos motivos mais comuns:

* Se você estiver desenvolvendo software bitcoin e precisar contar com um nó bitcoin para acesso programável (API) à rede e blockchain.

* Se você estiver construindo aplicativos que devem validar as transações de acordo com as regras de consenso do bitcoin. Normalmente, as empresas de software bitcoin executam vários nós.

* Se você deseja oferecer suporte a bitcoin. Executar um nó torna a rede mais robusta e capaz de atender a mais carteiras, mais usuários e mais transações.

* Se você não quiser depender de terceiros para processar ou validar suas transações.

Se você está lendo este livro e está interessado em desenvolver software bitcoin, deve estar executando seu próprio nó.

==== Configurando o Nó Bitcoin Core

((("Bitcoin Core", "running core nodes", "configuring")))((("warnings and cautions", "password creation")))((("passwords", "creating")))((("security", "passwords")))O Bitcoin Core procurará um arquivo de configuração em seu diretório de dados a cada inicialização. Nesta seção, examinaremos as várias opções de configuração e definiremos um arquivo de configuração. Para localizar o arquivo de configuração, execute +bitcoind -printtoconsole+ em seu terminal e procure as primeiras linhas.

----
$ bitcoind -printtoconsole
Bitcoin version v0.15.0
Using the 'standard' SHA256 implementation
Using data directory /home/ubuntu/.bitcoin/
Using config file /home/ubuntu/.bitcoin/bitcoin.conf
...
[a lot more debug output]
...
----

Você pode pressionar Ctrl-C para desligar o nó depois de determinar a localização do arquivo de configuração. Normalmente, o arquivo de configuração está dentro do diretório de dados _.bitcoin_ no diretório inicial do usuário. Não é criado automaticamente, mas você pode criar um arquivo de configuração inicial copiando e colando do exemplo <<#full_index_node>>, abaixo. Você pode criar ou modificar o arquivo de configuração em seu editor preferido.

O Bitcoin Core oferece mais de 100 opções de configuração que modificam o comportamento do nó da rede, o armazenamento da blockchain e muitos outros aspectos de sua operação. Para ver uma lista dessas opções, execute +bitcoind  --help+:

----
$ bitcoind --help
Bitcoin Core Daemon version v0.15.0

Usage:
  bitcoind [options]                     Start Bitcoin Core Daemon

Options:

  -?
       Print this help message and exit

  -version
       Print version and exit

  -alertnotify=<cmd>
       Execute command when a relevant alert is received or we see a really
       long fork (%s in cmd is replaced by message)
...
[many more options]
...

  -rpcthreads=<n>
       Set the number of threads to service RPC calls (default: 4)
----

((("configuration options", seealso="Bitcoin Core")))Aqui estão algumas das opções mais importantes que você pode definir no arquivo de configuração ou como parâmetros de linha de comando para +bitcoind+:

alertnotify:: Execute um comando ou script especificado para enviar alertas de emergência ao proprietário deste nó, geralmente por e-mail.

conf:: Um local alternativo para o arquivo de configuração. Isso só faz sentido como um parâmetro de linha de comando para +bitcoind+, pois não pode estar dentro do arquivo de configuração ao qual se refere.

datadir:: Selecione o diretório e o sistema de arquivos nos quais colocar todos os dados da blockchain. Por padrão, este é o subdiretório _.bitcoin_ do seu diretório pessoal. Certifique-se de que este sistema de arquivos tenha vários gigabytes de espaço livre.

prune:: Reduza os requisitos de espaço em disco para tantos megabytes, excluindo blocos antigos. Use isso em um nó com restrição de recursos que não suporta todo tamanho da blockchain.

txindex:: Mantenha um índice de todas as transações. Isso significa uma cópia completa da blockchain que permite recuperar programaticamente qualquer transação por ID.

dbcache:: O tamanho do cache UTXO. O padrão é 450 MiB. Aumente isso em hardware de ponta e reduza o tamanho em hardware de baixo custo para economizar memória às custas de E/S de disco lento.

maxconnections:: Defina o número máximo de nós dos quais aceitar conexões. Reduzir isso do padrão reduzirá o consumo de largura de banda. Use se você tiver um limite de dados ou pagar por gigabyte.

maxmempool:: Limite o pool de memória de transação a esse número de megabytes. Use-o para reduzir o uso de memória em nós com restrição de memória.

maxreceivebuffer/maxsendbuffer:: Limite o buffer de memória por conexão a muitos múltiplos de 1000 bytes. Use em nós com restrição de memória.

minrelaytxfee:: Defina a taxa de taxa mínima para a transação que você transmitirá. Abaixo desse valor, a transação é tratada fora do padrão, rejeitada do pool de transações e não retransmitida.


[[txindex]]
.Índice de Banco de Dados de Transações e Opção txindex
****
((("Bitcoin Core", "running core nodes", "database options")))((("transactions", "database configuration options")))((("txindex option")))((("full indexing option")))Por padrão, o Bitcoin Core constrói um banco de dados contendo _apenas_ as transações relacionadas à carteira do usuário. Se você deseja ser capaz de acessar _qualquer_ transação com comandos como +getrawtransaction+ (veja <<exploring_and_decoding_transanctions>>), você precisa configurar o Bitcoin Core para construir um índice de transação completo, que pode ser obtido com a opção +txindex+. Defina +txindex=1+ no arquivo de configuração Bitcoin Core. Se você não definir esta opção primeiro e depois defini-la para indexação completa, você precisa reiniciar +bitcoind+ com a opção +-reindex+ e esperar que ele reconstrua o índice.
****

<<full_index_node>> mostra como você pode combinar as opções anteriores, com um nó totalmente indexado, executando como uma API backend para um aplicativo bitcoin.

[[full_index_node]]
.Configuração de amostra de um nó de índice completo
====
----
alertnotify=myemailscript.sh "Alert: %s"
datadir=/lotsofspace/bitcoin
txindex=1
----
====

<<constrained_resources>> mostra um nó com restrição de recursos em execução em um servidor menor.

[[constrained_resources]]
.Configuração de amostra de um sistema com recursos limitados
====
----
alertnotify=myemailscript.sh "Alert: %s"
maxconnections=15
prune=5000
dbcache=150
maxmempool=150
maxreceivebuffer=2500
maxsendbuffer=500
----
====

Depois de editar o arquivo de configuração e definir as opções que melhor representam suas necessidades, você pode testar +bitcoind+ com esta configuração. Execute o Bitcoin Core com a opção +printtoconsole+ para executar em primeiro plano com saída para o console:

----
$ bitcoind -printtoconsole

Bitcoin version v0.15.0
InitParameterInteraction: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1
Assuming ancestors of block 0000000000000000003b9ce759c2a087d52abc4266f8f4ebd6d768b89defa50a have valid signatures.
Using the 'standard' SHA256 implementation
Default data directory /home/ubuntu/.bitcoin
Using data directory /lotsofspace/.bitcoin
Using config file /home/ubuntu/.bitcoin/bitcoin.conf
Using at most 125 automatic connections (1048576 file descriptors available)
Using 16 MiB out of 32/2 requested for signature cache, able to store 524288 elements
Using 16 MiB out of 32/2 requested for script execution cache, able to store 524288 elements
Using 2 threads for script verification
HTTP: creating work queue of depth 16
No rpcpassword set - using random cookie authentication
Generated RPC authentication cookie /lotsofspace/.bitcoin/.cookie
HTTP: starting 4 worker threads
init message: Verifying wallet(s)...
Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)
Using wallet wallet.dat
CDBEnv::Open: LogDir=/lotsofspace/.bitcoin/database ErrorFile=/lotsofspace/.bitcoin/db.log
scheduler thread start
Cache configuration:
* Using 250.0MiB for block index database
* Using 8.0MiB for chain state database
* Using 1742.0MiB for in-memory UTXO set (plus up to 286.1MiB of unused mempool space)
init message: Loading block index...
Opening LevelDB in /lotsofspace/.bitcoin/blocks/index
Opened LevelDB successfully

[... more startup messages ...]
----

Você pode pressionar Ctrl-C para interromper o processo quando estiver satisfeito com o carregamento das configurações corretas e a execução esperada.

Para executar o Bitcoin Core em segundo plano como um processo, inicie-o com a opção +daemon+, como +bitcoind -daemon+.

Para monitorar o progresso e o status do tempo de execução de seu nó bitcoin, use o comando +bitcoin-cli getblockchaininfo+:

----
$ bitcoin-cli getblockchaininfo
----

[source,json]
----
{
  "chain": "main",
  "blocks": 0,
  "headers": 83999,
  "bestblockhash": "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
  "difficulty": 1,
  "mediantime": 1231006505,
  "verificationprogress": 3.783041623201835e-09,
  "chainwork": "0000000000000000000000000000000000000000000000000000000100010001",
  "pruned": false,
  [...]
}
----

Isso mostra um nó com uma altura de blockchain de 0 blocos e 83999 cabeçalhos. O nó atualmente busca os cabeçalhos de bloco da melhor cadeia e depois continua a baixar os blocos completos.

Quando estiver satisfeito com as opções de configuração selecionadas, você deve adicionar bitcoin aos scripts de inicialização em seu sistema operacional, para que seja executado continuamente e reiniciado quando o sistema operacional for reiniciado. Você encontrará vários scripts de inicialização de exemplo para vários sistemas operacionais no diretório de origem do bitcoin em _contrib/init_ e um arquivo _README.md_ mostrando qual sistema usa qual script.((("", startref="BCnode03")))((("", startref="BNcore03")))

=== Interface de Programação de Aplicativo (API) Bitcoin Core

((("Bitcoin Core", "Bitcoin Core API", id="BCapi03")))O cliente Bitcoin Core implementa uma interface JSON-RPC que também pode ser acessada usando o auxiliar de linha de comando +bitcoin-cli+. A linha de comando nos permite experimentar interativamente os recursos que também estão disponíveis programaticamente por meio da API. ((("Bitcoin Core", "Bitcoin Core API", "RPC commands")))Para começar, invoque o comando +help+ para ver uma lista dos comandos RPC bitcoin disponíveis:

[[bitcoind_commands]]

----
$ bitcoin-cli help
addmultisigaddress nrequired ["key",...] ( "account" )
addnode "node" "add|remove|onetry"
backupwallet "destination"
createmultisig nrequired ["key",...]
createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,...}
decoderawtransaction "hexstring"
...
...
verifymessage "bitcoinaddress" "signature" "message"
walletlock
walletpassphrase "passphrase" timeout
walletpassphrasechange "oldpassphrase" "newpassphrase"
----

Cada um desses comandos pode ter vários parâmetros. Para obter ajuda adicional, uma descrição detalhada e informações sobre os parâmetros, adicione o nome do comando após +help+. Por exemplo, para ver a ajuda sobre o comando +getblockhash+ RPC:

----
$ bitcoin-cli help getblockhash
getblockhash height

Returns hash of block in best-block-chain at height provided.

Arguments:
1. height         (numeric, required) The height index

Result:
"hash"         (string) The block hash

Examples:
> bitcoin-cli getblockhash 1000
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockhash", "params": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
----

No final das informações de ajuda, você verá dois exemplos do comando RPC, usando o helper +bitcoin-cli+ ou o cliente HTTP +curl+. Esses exemplos demonstram como você pode chamar o comando. Copie o primeiro exemplo e veja o resultado:

----
$ bitcoin-cli getblockhash 1000
00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09
----

O resultado é um hash de bloco, que é descrito com mais detalhes nos capítulos seguintes. Mas, por enquanto, este comando deve retornar o mesmo resultado em seu sistema, demonstrando que seu nó Bitcoin Core está em execução, está aceitando comandos e tem informações sobre o bloco 1000 para retornar para você.

Nas próximas seções, demonstraremos alguns comandos RPC muito úteis e sua saída esperada.

==== Obtendo Informações Sobre o Status do Cliente Bitcoin Core

((("Bitcoin Core", "Bitcoin Core API", "status information")))Bitcoin Core fornece relatórios de status em diferentes módulos por meio da interface JSON-RPC. Os comandos mais importantes incluem +getblockchaininfo+, +getmempoolinfo+, +getnetworkinfo+ e +getwalletinfo+.

O comando RPC +getblockchaininfo+ do Bitcoin foi introduzido anteriormente. O comando +getnetworkinfo+ exibe informações básicas sobre o status do nó da rede bitcoin. Use +bitcoin-cli+ para executá-lo:

----
$ bitcoin-cli getnetworkinfo
----
[source,json]
----
  "version": 150000,
  "subversion": "/Satoshi:0.15.0/",
  "protocolversion": 70015,
  "localservices": "000000000000000d",
  "localrelay": true,
  "timeoffset": 0,
  "networkactive": true,
  "connections": 8,
  "networks": [
    ...
    detailed information about all networks (ipv4, ipv6 or onion)
    ...
  ],
  "relayfee": 0.00001000,
  "incrementalfee": 0.00001000,
  "localaddresses": [
  ],
  "warnings": ""
}

----

Os dados são retornados em JavaScript Object Notation (JSON), um formato que pode ser facilmente "consumido" por todas as linguagens de programação, mas também é bastante legível por humanos. Entre esses dados, vemos os números da versão do cliente de software bitcoin (150000) e do protocolo bitcoin (70015). Vemos o número atual de conexões (8) e várias informações sobre a rede bitcoin e as configurações relacionadas a este cliente.

[TIP]
====
Levará algum tempo, talvez mais de um dia, para que o cliente +bitcoind+ "alcance" a altura atual da blockchain enquanto baixa os blocos de outros clientes bitcoin. Você pode verificar seu progresso usando +getblockchaininfo+ para ver o número de blocos conhecidos.
====

[[exploring_and_decoding_transanctions]]
==== Explorando e Decodificando Transações

((("Bitcoin Core", "Bitcoin Core API", "exploring and decoding transactions")))((("transactions", "exploring with Bitcoin Core API")))Comandos: +getrawtransaction+, +decoderawtransaction+



No <<cup_of_coffee>>, ((("use cases", "buying coffee", id="alicethree")))Alice comprou uma xícara de café no Bob's Cafe. A transação dela foi gravada na blockchain com o ID da transação (+txid+) +0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2+. Vamos usar a API para recuperar e examinar essa transação, passando o ID da transação como um parâmetro:

++++
<pre data-type="programlisting">
$ bitcoin-cli getrawtransaction 0627052b6f28912f2703066a912ea577f2ce4da4caa5a&#x21b5;
5fbd8a57286c345c2f2

0100000001186f9f998a5aa6f048e51dd8419a14d8a0f1a8a2836dd734d2804fe65fa35779000&#x21b5;
000008b483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4&#x21b5;
ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813014&#x21b5;
10484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc54123363767&#x21b5;
89d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adfffffffff0260e3160000000&#x21b5;
0001976a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788acd0ef8000000000001976a9&#x21b5;
147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac00000000
</pre>
++++


[TIP]
====
((("transaction IDs (txd)")))((("malleability")))Um ID de transação não é autoritativo até que a transação seja confirmada. A ausência de um hash de transação na blockchain não significa que a transação não foi processada. Isso é conhecido como "maleabilidade da transação", porque os hashes de transação podem ser modificados antes da confirmação em um bloco. Após a confirmação, o +txid+ é imutável e autorizado.
====

O comando +getrawtransaction+ retorna uma transação serializada em notação hexadecimal. Para decodificar isso, usamos o comando +decoderawtransaction+, passando os dados hexadecimais como parâmetro. Você pode copiar o hex retornado por +getrawtransaction+ e colá-lo como um parâmetro em +decoderawtransaction+:

++++
<pre data-type="programlisting">
$ bitcoin-cli decoderawtransaction 0100000001186f9f998a5aa6f048e51dd8419a14d8&#x21b5;
a0f1a8a2836dd734d2804fe65fa35779000000008b483045022100884d142d86652a3f47ba474&#x21b5;
6ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298&#x21b5;
cad530a863ea8f53982c09db8f6e381301410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fd&#x21b5;
e0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa&#x21b5;
336a8d752adfffffffff0260e31600000000001976a914ab68025513c3dbd2f7b92a94e0581f5&#x21b5;
d50f654e788acd0ef8000000000001976a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8&#x21b5;
88ac00000000

</pre>
++++

++++
<pre data-type="programlisting" data-code-language="json">
{
  "txid": "0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2",
  "size": 258,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "7957a35fe64f80d234d76d83a2...8149a41d81de548f0a65a8a999f6f18",
      "vout": 0,
      "scriptSig": {
        "asm":"3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1decc...",
        "hex":"483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1de..."
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.01500000,
      "n": 0,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 ab68...5f654e7 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": [
          "1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA"
        ]
      }
    },
    {
      "value": 0.08450000,
      "n": 1,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 7f9b1a...025a8 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": [
          "1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK"
        ]
      }
    }
  ]
}

</pre>
++++

A decodificação da transação mostra todos os componentes desta transação, incluindo as entradas e saídas da transação. Nesse caso, vemos que a transação que creditou nosso novo endereço com 15 milibits usou uma entrada e gerou duas saídas. A entrada para esta transação foi a saída de uma transação confirmada anteriormente (mostrada como vin +txid+ começando com +7957a35fe+). As duas saídas correspondem ao crédito de 15 milibits e uma saída com troco de volta para o remetente.


Podemos explorar ainda mais a blockchain examinando a transação anterior referenciada por seu +txid+ nesta transação usando os mesmos comandos (por exemplo, +getrawtransaction+). Saltando de transação em transação, podemos seguir uma cadeia de transações de volta à medida que as moedas são transmitidas do endereço do proprietário para endereço do proprietário.



==== Explorando Blocos

((("Bitcoin Core", "Bitcoin Core API", "exploring blocks")))((("blocks", "exploring with Bitcoin Core API")))Comandos: +getblock+, +getblockhash+

((("blocks", "block height")))((("blocks", "block hash")))Explorar blocos é semelhante a explorar transações. No entanto, os blocos podem ser referenciados pelo bloco _height_ ou pelo bloco _hash_. Primeiro, vamos encontrar um bloco por sua altura (height). No <<cup_of_coffee>>, vimos que a transação de Alice foi incluída no bloco 277316.

Usamos o comando +getblockhash+, que usa a altura do bloco como parâmetro e retorna o hash do bloco para esse bloco:

++++
<pre data-type="programlisting">
$ bitcoin-cli getblockhash 277316
0000000000000001b6b9a13b095e96db41c4a928b97ef2d944a9b31b2cc7bdc4
</pre>
++++

Agora que sabemos em qual bloco a transação de Alice foi incluída, podemos consultar esse bloco. Usamos o comando +getblock+ com o hash do bloco como parâmetro:

++++
<pre data-type="programlisting">
$ bitcoin-cli getblock 0000000000000001b6b9a13b095e96db41c4a928b97ef2d944a9b3&#x21b5;
1b2cc7bdc4
</pre>
++++

++++
<pre data-type="programlisting" data-code-language="json">
{
  "hash": "0000000000000001b6b9a13b095e96db41c4a928b97ef2d944a9b31b2cc7bdc4",
  "confirmations": 37371,
  "size": 218629,
  "height": 277316,
  "version": 2,
  "merkleroot": "c91c008c26e50763e9f548bb8b2fc323735f73577effbc55502c51eb4cc7cf2e",
  "tx": [
    "d5ada064c6417ca25c4308bd158c34b77e1c0eca2a73cda16c737e7424afba2f",
    "b268b45c59b39d759614757718b9918caf0ba9d97c56f3b91956ff877c503fbe",
    "04905ff987ddd4cfe603b03cfb7ca50ee81d89d1f8f5f265c38f763eea4a21fd",
    "32467aab5d04f51940075055c2f20bbd1195727c961431bf0aff8443f9710f81",
    "561c5216944e21fa29dd12aaa1a45e3397f9c0d888359cb05e1f79fe73da37bd",
[... hundreds of transactions ...]
    "78b300b2a1d2d9449b58db7bc71c3884d6e0579617e0da4991b9734cef7ab23a",
    "6c87130ec283ab4c2c493b190c20de4b28ff3caf72d16ffa1ce3e96f2069aca9",
    "6f423dbc3636ef193fd8898dfdf7621dcade1bbe509e963ffbff91f696d81a62",
    "802ba8b2adabc5796a9471f25b02ae6aeee2439c679a5c33c4bbcee97e081196",
    "eaaf6a048588d9ad4d1c092539bd571dd8af30635c152a3b0e8b611e67d1a1af",
    "e67abc6bd5e2cac169821afc51b207127f42b92a841e976f9b752157879ba8bd",
    "d38985a6a1bfd35037cb7776b2dc86797abbb7a06630f5d03df2785d50d5a2ac",
    "45ea0a3f6016d2bb90ab92c34a7aac9767671a8a84b9bcce6c019e60197c134b",
    "c098445d748ced5f178ef2ff96f2758cbec9eb32cb0fc65db313bcac1d3bc98f"
  ],
  "time": 1388185914,
  "mediantime": 1388183675,
  "nonce": 924591752,
  "bits": "1903a30c",
  "difficulty": 1180923195.258026,
  "chainwork": "000000000000000000000000000000000000000000000934695e92aaf53afa1a",
  "previousblockhash": "0000000000000002a7bbd25a417c0374cc55261021e8a9ca74442b01284f0569",
  "nextblockhash": "000000000000000010236c269dd6ed714dd5db39d36b33959079d78dfd431ba7"
}
</pre>
++++

O bloco contém 419 transações e a 64ª transação listada (+0627052b...+) é o pagamento do café de Alice. A entrada +height+ nos diz que este é o bloco 277316 na blockchain.

==== Usando a Interface Programática do Bitcoin Core

((("Bitcoin Core", "Bitcoin Core API", "using programmatic interface")))((("programmatic interface", id="progint03")))O helper +bitcoin-cli+ é muito útil para explorar a API Bitcoin Core e testar funções. Mas todo o ponto de uma interface de programação de aplicativo é acessar funções programaticamente. Nesta seção, demonstraremos como acessar o Bitcoin Core de outro programa.

A API do Bitcoin Core é uma interface JSON-RPC. JSON significa JavaScript Object Notation e é uma maneira muito conveniente de apresentar dados que tanto humanos quanto programas podem ler facilmente. RPC significa Remote Procedure Call, o que significa que estamos chamando procedimentos (funções) que são remotos (no nó Bitcoin Core) através de um protocolo de rede. Nesse caso, o protocolo de rede é HTTP ou HTTPS (para conexões criptografadas).

Quando usamos o comando +bitcoin-cli+ para obter ajuda em um comando, ele nos mostrou um exemplo do uso de +curl+, o versátil cliente HTTP de linha de comando para construir uma dessas chamadas JSON-RPC:

----
$ curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockchaininfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
----

Este comando mostra que +curl+ envia uma solicitação HTTP ao host local (127.0.0.1), conectando-se à porta bitcoin padrão (8332) e enviando uma solicitação +jsonrpc+ para o método +getblockchaininfo+ usando a codificação +text/plain+.

Você pode notar que curl solicitará que as credenciais sejam enviadas junto com a solicitação. O Bitcoin Core criará uma senha aleatória em cada inicialização e a colocará no diretório de dados com o nome +.cookie+. O helper +bitcoin-cli+ pode ler este arquivo de senha no diretório de dados. Da mesma forma, você pode copiar a senha e passá-la para curl (ou quaisquer wrappers RPC Bitcoin Core de nível superior). Como alternativa, você pode criar uma senha estática com o script auxiliar fornecido em _./share/rpcauth/rpcauth.py_ no diretório de origem do Bitcoin Core.

Se você estiver implementando uma chamada JSON-RPC em seu próprio programa, poderá usar uma biblioteca HTTP genérica para construir a chamada, semelhante ao que é mostrado no exemplo +curl+ anterior.

No entanto, existem bibliotecas em quase todas as linguagens de programação que "envolvem" a API Bitcoin Core de uma forma que torna isso muito mais simples. Usaremos a biblioteca +python-bitcoinlib+ para simplificar o acesso à API. Lembre-se de que isso requer que você tenha uma instância do Bitcoin Core em execução, que será usada para fazer chamadas JSON-RPC.

O script Python em <<rpc_example>> faz uma chamada +getblockchaininfo+ simples e imprime o parâmetro +blocks+ dos dados retornados pelo Bitcoin Core.

[[rpc_example]]
.Executando getblockchaininfo por meio da API JSON-RPC do Bitcoin Core
====
[source,python]
----
include::code/rpc_example.py[]
----
====

Executá-lo nos dá o seguinte resultado:

----
$ python rpc_example.py
394075
----

Isso nos diz que nosso nó Bitcoin Core local tem 394075 blocos em seu blockchain. Não é um resultado espetacular, mas demonstra o uso básico da biblioteca como uma interface simplificada para a API JSON-RPC do Bitcoin Core.

A seguir, vamos usar as chamadas +getrawtransaction+ e +decodetransaction+ para recuperar os detalhes do pagamento do café de Alice. No <<rpc_transaction>>, recuperamos a transação de Alice e listamos as saídas da transação. Para cada saída, mostramos o endereço e o valor do destinatário. Como um lembrete, a transação de Alice teve uma saída pagando Bob's Cafe e uma saída para troca de volta para Alice.

[[rpc_transaction]]
.Recuperar uma transação e iterar suas saídas
====
[source,python]
----
include::code/rpc_transaction.py[]
----
====

Executando este código, obtemos:

----
$ python rpc_transaction.py
([u'1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA'], Decimal('0.01500000'))
([u'1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK'], Decimal('0.08450000'))
----

Ambos os exemplos anteriores são bastante simples. Você realmente não precisa de um programa para executá-los; você poderia facilmente usar o helper +bitcoin-cli+. O próximo exemplo, entretanto, requer várias centenas de chamadas RPC e demonstra mais claramente o uso de uma interface programática.

Em <<rpc_block>>, primeiro recuperamos o bloco 277316, depois recuperamos cada uma das 419 transações dentro por referência a cada ID de transação. Em seguida, iteramos por meio de cada uma das saídas da transação e adicionamos o valor.((("", startref="alicethree")))

[[rpc_block]]
.Recuperando um bloco e adicionando todas as saídas da transação
====
[source,python]
----
include::code/rpc_block.py[]
----
====

Executando este código, obtemos:

----
$ python rpc_block.py

('Total value in block: ', Decimal('10322.07722534'))
----

Nosso código de exemplo calcula que o valor total transacionado neste bloco é 10.322.07722534 BTC (incluindo 25 recompensas BTC e 0,0909 BTC em taxas). Compare isso com a quantidade relatada por um site explorador de blocos, procurando pelo hash ou altura do bloco. Alguns exploradores de blocos relatam o valor total excluindo a recompensa e excluindo as taxas. Veja se você consegue identificar a diferença.((("", startref="BCapi03")))((("", startref="progint03")))

[[alt_libraries]]
=== Clientes, Bibliotecas e Kits de Ferramentas Alternativas

((("Bitcoin Core", "alternatives to", id="BCalt03")))((("clients, libraries, and toolkits", id="clients03")))((("libraries, clients, and toolkits", id="librar03")))((("toolkits, libraries, and clients", id="toolkit03")))((("third-party API clients", id="thirdpart03")))Existem muitos clientes, bibliotecas, kits de ferramentas alternativos e até implementações de nó completo no ecossistema bitcoin. Eles são implementados em uma variedade de linguagens de programação, oferecendo aos programadores interfaces nativas em sua linguagem preferida.

As seções a seguir listam algumas das melhores bibliotecas, clientes e kits de ferramentas, organizados por linguagens de programação.

==== C/C++
https://github.com/bitcoin/bitcoin[Bitcoin Core] :: A implementação de referência do bitcoin
https://github.com/libbitcoin/libbitcoin-system[libbitcoin]:: Kit de ferramentas de desenvolvimento C++ de plataforma cruzada, nó e biblioteca de consenso
https://github.com/libbitcoin/libbitcoin-explorer[bitcoin explorer]:: Ferramenta de linha de comando da Libbitcoin
https://github.com/jgarzik/picocoin[picocoin]:: Uma biblioteca cliente leve da linguagem C para bitcoin de Jeff Garzik

==== JavaScript
https://bcoin.io/[bcoin]:: Uma implementação modular e escalonável de nó completo com API
https://bitcore.io/[Bitcore] :: Nó completo, API e biblioteca por Bitpay
https://github.com/bitcoinjs/bitcoinjs-lib[BitcoinJS] :: Uma biblioteca Bitcoin JavaScript pura para node.js e navegadores

==== Java
https://bitcoinj.github.io[bitcoinj]:: Uma biblioteca cliente de nó completo Java

==== PHP
https://github.com/bit-wasp/bitcoin-php[bitwasp/bitcoin]:: Uma biblioteca de bitcoins PHP e projetos relacionados

==== Python
https://github.com/petertodd/python-bitcoinlib[python-bitcoinlib]::  Uma biblioteca bitcoin Python, biblioteca de consenso e nó de Peter Todd
https://github.com/richardkiss/pycoin[pycoin]:: Uma biblioteca bitcoin Python de Richard Kiss
https://github.com/primal100/pybitcointools[pybitcointools]:: Uma biblioteca de bitcoin Python de fork arquivada por Vitalik Buterin

==== Ruby
https://github.com/sinisterchipmunk/bitcoin-client[bitcoin-client]:: Um wrapper de biblioteca Ruby para a API JSON-RPC

==== Go
https://github.com/btcsuite/btcd[btcd]:: Um cliente bitcoin de nó completo da linguagem Go

==== Rust
https://github.com/rust-bitcoin/rust-bitcoin[rust-bitcoin]:: Biblioteca Rust bitcoin para serialização, análise e chamadas de API

==== C#
https://github.com/MetacoSA/NBitcoin[NBitcoin]:: Biblioteca abrangente de bitcoins para a estrutura .NET

==== Objective-C
https://github.com/oleganza/CoreBitcoin[CoreBitcoin]:: Kit de ferramentas Bitcoin para ObjC e Swift

Existem muito mais bibliotecas em uma variedade de outras linguagens de programação e mais são criadas o tempo todo.((("", startref="BCalt03")))((("", startref="clients03")))((("", startref="thirdpart03")))((("", startref="toolkit03")))((("", startref="librar03")))
