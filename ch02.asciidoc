[[ch02_bitcoin_overview]]
== Como o Bitcoin Funciona

=== Transações, Blocos, Mineração e Blockchain

((("bitcoin", "overview of", id="BCover02")))((("central trusted authority")))((("decentralized systems", "bitcoin overview", id="DCSover02")))O sistema bitcoin, ao contrário dos sistemas bancários e de pagamento tradicionais, é baseado na confiança descentralizada. Em vez de uma autoridade central confiável, no bitcoin, a confiança é alcançada como uma propriedade emergente a partir das interações de diferentes participantes no sistema bitcoin. Neste capítulo, examinaremos o bitcoin de um alto nível rastreando uma única transação através do sistema bitcoin e observaremos como ele se torna "confiável" e aceito pelo mecanismo de consenso distribuído do bitcoin e, finalmente, é registrado no blockchain, o livro-razão distribuído de todas as transações. Os capítulos subsequentes se aprofundarão na tecnologia por trás das transações, a rede e a mineração.

==== Visão Geral do Bitcoin

No diagrama de visão geral mostrado em <<bitcoin-overview>>, vemos que o sistema bitcoin consiste em usuários com carteiras contendo chaves, transações que são propagadas pela rede e mineradores que produzem (por meio de computação competitiva) a blockchain de consenso, que é o registro oficial de todas as transações.


((("blockchain explorer sites")))Cada exemplo neste capítulo é baseado em uma transação real feita na rede bitcoin, simulando as interações entre os usuários (Joe, Alice, Bob e Gopesh) enviando fundos de uma carteira para outra. Ao rastrear uma transação através da rede bitcoin para o blockchain, usaremos um site _blockchain explorer_ para visualizar cada etapa. Um explorador de blockchain é um aplicativo web que opera como um mecanismo de busca de bitcoin, permitindo que você pesquise endereços, transações e blocos e veja as relações e fluxos entre eles.

[[bitcoin-overview]]
.Visão Geral do Bitcoin
image::images/mbc2_0201.png["Bitcoin Overview"]

((("Bitcoin Block Explorer")))((("BlockCypher Explorer")))((("blockchain.info")))((("BitPay Insight")))Exploradores de blockchain populares incluem:

* https://live.blockcypher.com[BlockCypher Explorer]
* https://blockchain.info[blockchain.info]
* https://insight.bitpay.com[BitPay Insight]
* https://blockstream.info[Blockstream Explorer]

Cada um deles tem uma função de pesquisa que pode pegar um endereço de bitcoin, hash de transação, número de bloco ou hash de bloco e recuperar informações correspondentes da rede bitcoin. Com cada transação ou exemplo de bloco, forneceremos um URL para que você possa pesquisá-lo e estudá-lo em detalhes.


[[cup_of_coffee]]
==== Comprando Uma Xícara de Café

((("use cases", "buying coffee", id="UCcoffee02")))Alice, apresentada no capítulo anterior, é uma nova usuária que acaba de adquirir seu primeiro bitcoin. No <<getting_first_bitcoin>>, Alice se encontrou com seu amigo Joe para trocar algum dinheiro por bitcoin. A transação criada por Joe financiou a carteira de Alice com 0,10 BTC. Agora Alice fará sua primeira transação de varejo, comprando uma xícara de café na cafeteria Bob's em Palo Alto, Califórnia.

((("exchange rates", "determining")))Bob's Cafe recentemente começou a aceitar pagamentos de bitcoin adicionando uma opção de bitcoin ao seu sistema de ponto de venda. Os preços no Bob's Cafe são listados na moeda local (dólares americanos), mas no caixa, os clientes têm a opção de pagar em dólares ou bitcoin. Alice faz seu pedido de uma xícara de café e Bob o registra no caixa, como faz para todas as transações. O sistema do ponto de venda converte automaticamente o preço total de dólares americanos para bitcoin à taxa de mercado em vigor e exibe o preço em ambas as moedas:

----
Total:
$1,50 USD
0,015 BTC
----


((("millibits")))Bob diz: "Isso é um dólar e cinquenta, ou quinze milibits."

((("payment requests")))((("QR codes", "payment requests")))O sistema de ponto de venda de Bob também criará automaticamente um código QR especial contendo uma _solicitação de pagamento_ (veja <<payment-request-QR>>).

Ao contrário de um código QR que simplesmente contém um endereço de bitcoin de destino, uma solicitação de pagamento é um URL codificado por QR que contém um endereço de destino, uma quantia de pagamento e uma descrição genérica como "Café do Bob". Isso permite que um aplicativo de carteira bitcoin preencha previamente as informações usadas para enviar o pagamento enquanto mostra uma descrição legível para o usuário. Você pode escanear o código QR com um aplicativo de carteira bitcoin para ver o que Alice veria.


[[payment-request-QR]]
.Código QR de solicitação de pagamento
image::images/mbc2_0202.png["payment-request"]

[TIP]
====
((("QR codes", "warnings and cautions")))((("transactions", "warnings and cautions")))((("warnings and cautions", "avoid sending money to addresses appearing in book")))Tente escanear com sua carteira para ver o endereço e o valor, mas NÃO ENVIE DINHEIRO.
====
[[payment-request-URL]]
.O código QR da solicitação de pagamento codifica a seguinte URL, definida no BIP-21:
----
bitcoin:1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA?
amount=0.015&
label=Bob%27s%20Cafe&
message=Purchase%20at%20Bob%27s%20Cafe

Components of the URL

A bitcoin address: "1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA"
The payment amount: "0.015"
A label for the recipient address: "Bob's Cafe"
A description for the payment: "Purchase at Bob's Cafe"
----

Alice usa seu smartphone para ler o código de barras em exibição. Seu smartphone mostra um pagamento de +0,0150 BTC+ para +Bob's Cafe+ e ela seleciona Enviar para autorizar o pagamento. Dentro de alguns segundos (aproximadamente o mesmo tempo que uma autorização de cartão de crédito), Bob vê a transação no registro, completando a transação.

Nas seções a seguir, examinaremos essa transação com mais detalhes. Veremos como a carteira de Alice a construiu, como foi propagada pela rede, como foi verificada e, finalmente, como Bob pode gastar essa quantia em transações subsequentes.

[NOTE]
====
((("fractional values")))((("milli-bitcoin")))((("satoshis")))A rede bitcoin pode transacionar em valores fracionários, por exemplo, de milibitcoin (1/1000 de um bitcoin) até 1/100.000.000 de um bitcoin, que é conhecido como satoshi. Ao longo deste livro, usaremos o termo "bitcoin" para se referir a qualquer quantidade de moeda bitcoin, desde a menor unidade (1 satoshi) ao número total (21.000.000) de todos os bitcoins que serão extraídos.
====

Você pode examinar a transação de Alice com o Bob's Cafe no blockchain usando um site explorador de blocos (<<view_alice_transaction>>):

[[view_alice_transaction]]
.Ver a transação de Alice em https://blockchain.info/tx/0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2[blockchain.info]
====
----
https://blockchain.info/tx/0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2
----
====

=== Transações Bitcoin

((("transactions", "defined")))Em termos simples, uma transação informa à rede que o proprietário de algum valor de bitcoin autorizou a transferência desse valor para outro proprietário. O novo proprietário agora pode gastar o bitcoin criando outra transação que autoriza a transferência para outro proprietário e assim por diante, em uma cadeia de propriedade.

==== Entradas e Saídas de Transações

((("transactions", "overview of", id="Tover02")))((("outputs and inputs", "basics of")))As transações são como linhas em um livro-razão de dupla entrada. Cada transação contém uma ou mais "entradas", que são como débitos em uma conta bitcoin. Do outro lado da transação, há uma ou mais "saídas", que são como créditos adicionados a uma conta bitcoin. ((("fees", "transaction fees")))As entradas e saídas (débitos e créditos) não somam necessariamente o mesmo valor. Em vez disso, as saídas somam um pouco menos do que as entradas e a diferença representa uma _taxa de transação_ implícita, que é um pequeno pagamento cobrado pelo minerador que inclui a transação no livro-razão. Uma transação de bitcoin é mostrada como uma entrada do livro de contabilidade na <<transaction-double-entry>>.

A transação também contém o comprovante de propriedade de cada quantidade de bitcoin (insumos) cujo valor está sendo gasto, na forma de uma assinatura digital do proprietário, que pode ser validada de forma independente por qualquer pessoa. ((("spending bitcoin", "defined")))Em termos de bitcoin, "gastar" é assinar uma transação que transfere o valor de uma transação anterior para um novo proprietário identificado por um endereço de bitcoin.

[[transaction-double-entry]]
.Transação como escrituração de partidas dobradas
image::images/mbc2_0203.png["Transaction Double-Entry"]

==== Cadeias de Transações

((("chain of transactions")))O pagamento de Alice ao Bob's Cafe usa a saída de uma transação anterior como entrada. No capítulo anterior, Alice recebeu bitcoin de seu amigo Joe em troca de dinheiro. Essa transação criou um valor de bitcoin bloqueado pela chave de Alice. Sua nova transação com o Bob's Cafe faz referência à transação anterior como uma entrada e cria novas saídas para pagar pela xícara de café e receber o troco. As transações formam uma cadeia, onde as entradas da última transação correspondem às saídas de transações anteriores. A chave de Alice fornece a assinatura que desbloqueia as saídas de transações anteriores, provando assim à rede bitcoin que ela possui os fundos. Ela anexa o pagamento do café ao endereço de Bob, "onerando" essa saída com a exigência de que Bob produza uma assinatura para gastar aquela quantia. Isso representa uma transferência de valor entre Alice e Bob. Esta cadeia de transações, de Joe a Alice e Bob, é ilustrada em <<blockchain-mnemonic>>.

[[blockchain-mnemonic]]
.Uma cadeia de transações, onde a saída de uma transação é a entrada da próxima transação
image::images/mbc2_0204.png["Transaction chain"]

==== Fazendo Mudanças

((("change, making")))((("change addresses")))((("addresses", "change addresses")))Muitas transações bitcoin incluirão saídas que fazem referência a um endereço do novo proprietário e um endereço do proprietário atual, chamado de endereço de _mudança_. Isso ocorre porque as entradas de transação, como notas de moeda, não podem ser divididas. Se você comprar um item de $5 dólares americanos em uma loja, mas usar uma nota de $20 dólares americanos para pagar pelo item, espera receber $15 dólares em troco. O mesmo conceito se aplica às entradas de transações bitcoin. Se você comprou um item que custa 5 bitcoin, mas tinha apenas uma entrada de 20 bitcoin para usar, sua carteira criaria uma única transação que envia duas saídas, uma saída de 5 bitcoin para o dono da loja e uma saída de 15 bitcoin de volta para você como alteração (menos qualquer taxa de transação aplicável). É importante ressaltar que o endereço de alteração não precisa ser o mesmo da entrada e, por motivos de privacidade, costuma ser um novo endereço da carteira do proprietário.

Carteiras diferentes podem usar estratégias diferentes ao agregar entradas para fazer um pagamento solicitado pelo usuário. Eles podem agregar muitos pequenos insumos ou usar um que seja igual ou maior do que o pagamento desejado. A menos que a carteira possa agregar entradas de forma a corresponder exatamente ao pagamento desejado mais taxas de transação, a carteira precisará gerar alguns trocos. Isso é muito semelhante ao modo como as pessoas lidam com dinheiro. Se você sempre usar a nota maior no bolso, acabará com um bolso cheio de moedas perdidas. Se você usar apenas os trocos avulsos, sempre terá apenas notas menores. As pessoas inconscientemente encontram um equilíbrio entre esses dois extremos, e os desenvolvedores de carteiras bitcoin se esforçam para programar esse equilíbrio.

((("transactions", "defined")))((("outputs and inputs", "defined")))((("inputs", see="outputs and inputs")))Em resumo, _transações_ move o valor de _transações de entrada_ para _transações de saída_. Uma entrada é uma referência à saída de uma transação anterior, mostrando de onde o valor está vindo. Uma transação geralmente inclui uma saída que direciona um valor específico para o endereço de bitcoin de um novo proprietário e uma saída de alteração de volta para o proprietário original. As saídas de uma transação podem ser usadas como entradas em uma nova transação, criando assim uma cadeia de propriedade à medida que o valor é movido de proprietário para proprietário (veja <<blockchain-mnemonic>>).

==== Formulários de Transação Comum

A forma mais comum de transação é um simples pagamento de um endereço para outro, que geralmente inclui algum "troco" devolvido ao proprietário original. Este tipo de transação tem uma entrada e duas saídas e é mostrado em <<transaction-common>>.

[[transaction-common]]
.Transação mais comum
image::images/mbc2_0205.png["Common Transaction"]

Outra forma comum de transação é aquela que agrega várias entradas em uma única saída (veja <<transaction-aggregating>>). Isso representa o equivalente no mundo real de trocar uma pilha de moedas e notas de moeda por uma única nota maior. Transações como essas às vezes são geradas por aplicativos de carteira para limpar muitos valores menores que foram recebidos como troco de pagamentos.

[[transaction-aggregating]]
.Transação agregando fundos
image::images/mbc2_0206.png["Aggregating Transaction"]

Finalmente, outro formulário de transação que é visto com frequência no livro-razão de bitcoin é uma transação em lote, que distribui uma entrada para várias saídas representando vários destinatários, uma técnica chamada "lote de transações" (veja <<transaction-distributing>>). Uma vez que este tipo de transação é útil para economizar em taxas de transação, é comumente usado por entidades comerciais para distribuir fundos, como quando uma empresa está processando pagamentos de folha de pagamento para vários funcionários ou quando uma troca de bitcoin está processando saques de vários clientes em uma única transação.((("", startref="Tover02")))

[[transaction-distributing]]
.Transação de distribuição de fundos
image::images/mbc2_0207.png["Distributing Transaction"]

=== Construindo uma Transação

((("transactions", "constructing", id="Tconstruct02")))((("wallets", "constructing transactions")))O aplicativo de carteira de Alice contém toda a lógica para selecionar entradas e saídas apropriadas para construir uma transação de acordo com as especificações de Alice. Alice só precisa especificar um destino e uma quantia, e o resto acontece no aplicativo de carteira sem que ela veja os detalhes. É importante ressaltar que um aplicativo de carteira pode construir transações mesmo se estiver completamente offline. Assim como preencher um cheque em casa e depois enviá-lo ao banco em um envelope, a transação não precisa ser construída e assinada enquanto estiver conectada à rede bitcoin.

==== Obtendo as Entradas Certas

((("outputs and inputs", "locating and tracking inputs")))O aplicativo de carteira de Alice primeiro terá que encontrar entradas que possam pagar a quantia que ela deseja enviar para Bob. A maioria das carteiras mantém registro de todas as saídas disponíveis pertencentes a endereços na carteira. Portanto, a carteira de Alice conteria uma cópia da saída da transação de Joe, que foi criada em troca de dinheiro (veja <<getting_first_bitcoin>>). Um aplicativo de carteira bitcoin executado como um cliente de nó completo contém, na verdade, uma cópia de cada saída não gasta de cada transação no blockchain. Isso permite que uma carteira construa entradas de transações, bem como verifique rapidamente as transações de entrada como tendo entradas corretas. No entanto, como um cliente de nó completo ocupa muito espaço em disco, a maioria das carteiras de usuários executa clientes "leves" que rastreiam apenas as saídas não gastas do próprio usuário.

Se o aplicativo de carteira não mantiver uma cópia das saídas de transações não gastas, ele pode consultar a rede bitcoin para recuperar essas informações usando uma variedade de APIs disponíveis por diferentes provedores ou solicitando um nó completo usando uma chamada de interface de programação de aplicativo (API). <<example_2-2>> mostra uma solicitação de API, construída como um comando HTTP GET para um URL específico. Esse URL retornará todas as saídas de transações não gastas de um endereço, fornecendo a qualquer aplicativo as informações de que precisa para construir entradas de transações para gastos. Usamos o cliente HTTP de linha de comando simples _cURL_ para recuperar a resposta.

[[example_2-2]]
.Procure todas as saídas não gastas para o endereço bitcoin de Alice
====
[source,bash]
----
$ curl https://blockchain.info/unspent?active=1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK
----
====

[source,json]
----
{

	"unspent_outputs":[

		{
			"tx_hash":"186f9f998a5...2836dd734d2804fe65fa35779",
			"tx_index":104810202,
			"tx_output_n": 0,
			"script":"76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac",
			"value": 10000000,
			"value_hex": "00989680",
			"confirmations":0
		}

	]
}
----


A resposta em <<example_2-2>> mostra uma saída não gasta (uma que não foi resgatada ainda) sob a propriedade do endereço de Alice +1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK+. A resposta inclui a referência à transação na qual esta saída não gasta está contida (o pagamento de Joe) e seu valor em satoshis, em 10 milhões, equivalente a 0,10 bitcoin. Com essas informações, o aplicativo de carteira de Alice pode construir uma transação para transferir esse valor para novos endereços de proprietários.

[TIP]
====
Veja a https://www.blockchain.com/btc/tx/7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18[transação de Joe para Alice].
====

Como você pode ver, a carteira de Alice contém bitcoins suficientes em uma única saída não gasta para pagar a xícara de café. Se não fosse esse o caso, o aplicativo de carteira de Alice poderia ter que "vasculhar" uma pilha de saídas menores não gastas, como pegar moedas em uma bolsa até encontrar o suficiente para pagar o café. Em ambos os casos, pode ser necessário obter algum troco, o que veremos na próxima seção, pois o aplicativo de carteira cria as saídas da transação (pagamentos).


==== Criando as Saídas

((("outputs and inputs", "creating outputs")))Uma saída de transação é criada na forma de um script que cria um ônus sobre o valor e só pode ser resgatado pela introdução de uma solução para o script. Em termos mais simples, a saída da transação de Alice conterá um script que diz algo como: "Esta saída é paga a quem puder apresentar uma assinatura da chave correspondente ao endereço de Bob." Como apenas Bob possui a carteira com as chaves correspondentes a esse endereço, apenas a carteira de Bob pode apresentar tal assinatura para resgatar esta saída. Alice irá, portanto, "onerar" o valor de saída com a solicitação de uma assinatura de Bob.

Essa transação também incluirá uma segunda saída, porque os fundos de Alice estão na forma de uma saída de 0,10 BTC, muito dinheiro para a xícara de café de 0,015 BTC. Alice precisará de 0,085 BTC na mudança. O pagamento trocado de Alice é criado pela carteira de Alice como uma saída na mesma transação que o pagamento a Bob. Basicamente, a carteira de Alice divide seus fundos em dois pagamentos: um para Bob e outro para ela mesma. Ela pode então usar (gastar) o resultado da mudança em uma transação subsequente.

Finalmente, para que a transação seja processada pela rede em tempo hábil, o aplicativo de carteira de Alice adicionará uma pequena taxa. Isso não está explícito na transação; está implícito na diferença entre entradas e saídas. Se, em vez de receber 0,085 de mudança, Alice criar apenas 0,0845 como a segunda saída, sobrará 0,0005 BTC (meio milibitcoin). O BTC de 0,10 da entrada não é totalmente gasto com as duas saídas, porque somam menos de 0,10. A diferença resultante é a _taxa de transação_ que é cobrada pelo minerador como uma taxa para validar e incluir a transação em um bloco a ser registrado no blockchain.

A transação resultante pode ser vista usando um aplicativo web explorador de blockchain, conforme mostrado em <<transaction-alice>>.

[[transaction-alice]]
[role="smallerseventyfive"]
.Transação de Alice para Bob's Cafe
image::images/mbc2_0208.png["Alice Coffee Transaction"]

[[transaction-alice-url]]
[TIP]
====
Veja a https://www.blockchain.com/btc/tx/0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2[transação de Alice para Bob's Cafe].
====

==== Adicionando a Transação ao Livro-Razão

A transação criada pelo aplicativo de carteira de Alice tem 258 bytes e contém tudo o que é necessário para confirmar a propriedade dos fundos e atribuir novos proprietários. Agora, a transação deve ser transmitida para a rede bitcoin, onde fará parte do blockchain. Na próxima seção, veremos como uma transação se torna parte de um novo bloco e como o bloco é "extraído". Finalmente, veremos como o novo bloco, uma vez adicionado ao blockchain, é cada vez mais confiável pela rede à medida que mais blocos são adicionados.

===== Transmitindo a transação

((("propagation", "process of")))Como a transação contém todas as informações necessárias para o processamento, não importa como ou onde ela é transmitida para a rede bitcoin. A rede bitcoin é uma rede ponto-a-ponto, com cada cliente bitcoin participando conectando-se a vários outros clientes bitcoin. O objetivo da rede bitcoin é propagar transações e blocos para todos os participantes.

===== Como se propaga

((("bitcoin nodes", "defined")))((("nodes", see="bitcoin nodes")))Qualquer sistema, como um servidor, aplicativo de desktop ou carteira, que participa da rede bitcoin "falando" o protocolo bitcoin é chamado de _nó bitcoin_. O aplicativo de carteira de Alice pode enviar a nova transação para qualquer nó bitcoin ao qual esteja conectado por meio de qualquer tipo de conexão: com fio, Wi-Fi, celular, etc. Sua carteira de bitcoin não precisa ser conectada diretamente à carteira de bitcoin de Bob e ela não precisa usar a conexão de internet oferecida pelo cafeteria, embora ambas as opções também sejam possíveis. ((("propagation", "flooding technique")))((("flooding technique")))Qualquer nó bitcoin que receba uma transação válida que não tenha visto antes irá encaminhá-la imediatamente para todos os outros nós aos quais está conectado, uma técnica de propagação conhecida como _inundação_. Assim, a transação se propaga rapidamente pela rede ponto-a-ponto, atingindo uma grande porcentagem dos nós em poucos segundos.

===== Visão de Bob

Se o aplicativo de carteira bitcoin de Bob estiver diretamente conectado ao aplicativo de carteira de Alice, o aplicativo de carteira de Bob pode ser o primeiro nó a receber a transação. No entanto, mesmo se a carteira de Alice enviar a transação por meio de outros nós, ela alcançará a carteira de Bob em alguns segundos. A carteira de Bob identificará imediatamente a transação de Alice como uma conta a receber porque contém saídas resgatáveis ​​pelas chaves de Bob. O aplicativo de carteira de Bob também pode verificar de forma independente se a transação está bem formada, usa saídas não gastas anteriormente e contém taxas de transação suficientes para serem incluídas no próximo bloco. Nesse ponto, Bob pode assumir, com pouco risco, que a transação em breve será incluída em um bloco e confirmada.

[TIP]
====
((("confirmations", "of small-value transactions", secondary-sortas="small-value transactions")))Um equívoco comum sobre as transações de bitcoin é que elas devem ser "confirmadas" aguardando 10 minutos para um novo bloco ou até 60 minutos para seis confirmações completas. Embora as confirmações garantam que a transação foi aceita por toda a rede, esse atraso é desnecessário para itens de pequeno valor, como uma xícara de café. Um comerciante pode aceitar uma transação válida de pequeno valor sem confirmações, com não mais risco do que um pagamento com cartão de crédito feito sem uma identidade ou assinatura, como os comerciantes aceitam rotineiramente hoje.((("", startref="Tconstruct02")))
====

=== Mineração de Bitcoin

((("mining and consensus", "overview of", id="MACover02")))((("blockchain (the)", "overview of mining", id="BToverview02")))A transação de Alice agora é propagada na rede bitcoin. Ela não se torna parte do _blockchain_ até que seja verificado e incluído em um bloco por um processo denominado _mineração_. Veja <<mining>> para uma explicação detalhada.

O sistema de confiança bitcoin é baseado em computação. As transações são agrupadas em _blocos_, o que requer uma enorme quantidade de computação para provar, mas apenas uma pequena quantidade de computação para verificar como comprovado. O processo de mineração serve a dois propósitos no bitcoin:

* ((("mining and consensus", "consensus rules", "security provided by")))((("consensus", see="mining and consensus")))Os nós de mineração validam todas as transações por referência às _regras de consenso_ do bitcoin. Portanto, a mineração fornece segurança para transações de bitcoin, rejeitando transações inválidas ou malformadas.
* A mineração cria um novo bitcoin em cada bloco, quase como um banco central imprimindo dinheiro novo. A quantidade de bitcoin criada por bloco é limitada e diminui com o tempo, seguindo um cronograma de emissão fixo.


A mineração atinge um equilíbrio preciso entre custo e recompensa. A mineração usa eletricidade para resolver um problema matemático. Um minerador bem-sucedido receberá uma _recompensa_ na forma de novo bitcoin e taxas de transação. Porém, a recompensa só será cobrada se o mineiro tiver validado corretamente todas as transações, de acordo com as regras de _consenso_. Este delicado equilíbrio fornece segurança para bitcoin sem uma autoridade central.

Uma boa maneira de descrever a mineração é como um gigantesco jogo competitivo de sudoku que reinicia toda vez que alguém encontra uma solução e cuja dificuldade se ajusta automaticamente de forma que leva aproximadamente 10 minutos para encontrar uma solução. Imagine um quebra-cabeça de sudoku gigante, com vários milhares de linhas e colunas de tamanho. Se eu mostrar um quebra-cabeça completo, você poderá verificá-lo rapidamente. No entanto, se o quebra-cabeça tiver alguns quadrados preenchidos e o resto estiver vazio, é muito trabalhoso resolvê-lo! A dificuldade do sudoku pode ser ajustada alterando seu tamanho (mais ou menos linhas e colunas), mas ainda pode ser verificada facilmente, mesmo se for muito grande. O "quebra-cabeça" usado no bitcoin é baseado em um hash criptográfico e exibe características semelhantes: é assimetricamente difícil de resolver, mas fácil de verificar, e sua dificuldade pode ser ajustada.

((("mining and consensus", "mining farms and pools")))Em <<user-stories>>, nós introduzimos ((("use cases", "mining for bitcoin")))Jing, um empresário de Xangai. Jing administra uma _fazenda de mineração_, que é uma empresa que opera milhares de computadores especializados em mineração, competindo pela recompensa. A cada 10 minutos ou mais, os computadores de mineração de Jing competem contra milhares de sistemas semelhantes em uma corrida global para encontrar uma solução para um bloco de transações. ((("Proof-of-Work algorithm")))((("mining and consensus", "Proof-of-Work algorithm")))Encontrar essa solução, a chamada _Prova-de-Trabalho_ ou _Proof-of-Work_ (PoW), requer quatrilhões de operações de hash por segundo em toda a rede bitcoin. O algoritmo de Prova-de-Trabalho envolve hashing repetidamente do cabeçalho do bloco e de um número aleatório com o algoritmo criptográfico SHA256 até que uma solução correspondente a um padrão predeterminado surja. O primeiro minerador a encontrar essa solução vence a rodada da competição e publica esse bloco no blockchain.

Jing começou a minerar em 2010 usando um computador desktop muito rápido para encontrar uma prova de trabalho adequada para novos blocos. À medida que mais mineiros começaram a aderir à rede bitcoin, a dificuldade do problema aumentou rapidamente. Logo, Jing e outros mineiros fizeram upgrade para um hardware mais especializado, com unidades de processamento gráfico (GPUs) dedicadas de ponta, frequentemente usadas em desktops ou consoles de jogos. No momento da redação deste artigo, a dificuldade é tão grande que só é lucrativo para minerar com ((("application-specific integrated circuits (ASIC)")))circuitos integrados de aplicativos específicos (ASIC), essencialmente centenas de algoritmos de mineração impressos em hardware, executados em paralelo em um único chip de silício. ((("mining pools", "defined")))A empresa de Jing também participa de um _conjunto de mineração_, que, assim como um conjunto de loteria, permite que vários participantes compartilhem seus esforços e recompensas. A empresa de Jing agora administra um depósito contendo milhares de mineiros ASIC para extrair bitcoin 24 horas por dia. A empresa paga seus custos de eletricidade com a venda do bitcoin que é capaz de gerar na mineração, gerando alguma receita com os lucros.

=== Transações de Mineração em Blocos

((("blocks", "mining transactions in")))Novas transações fluem constantemente para a rede a partir de carteiras de usuários e outros aplicativos. Conforme são vistos pelos nós da rede bitcoin, eles são adicionados a um pool temporário de transações não verificadas mantido por cada nó. À medida que os mineradores constroem um novo bloco, eles adicionam transações não verificadas desse pool ao novo bloco e, em seguida, tentam provar a validade desse novo bloco, com o algoritmo de mineração (Prova-de-Trabalho). O processo de mineração é explicado em detalhes em <<mining>>.

As transações são adicionadas ao novo bloco, priorizadas pelas transações de taxa mais alta primeiro e alguns outros critérios. Cada minerador inicia o processo de mineração de um novo bloco de transações assim que recebe o bloco anterior da rede, sabendo que perdeu a rodada anterior da competição. Eles imediatamente criam um novo bloco, preenchem-no com as transações e a impressão digital do bloco anterior e começam a calcular a Prova-de-Trabalho para o novo bloco. Cada minerador inclui uma transação especial em seu bloco, que paga seu próprio endereço de bitcoin a recompensa do bloco (atualmente 6,25 bitcoin recém-criado) mais a soma das taxas de transação de todas as transações incluídas no bloco. Se encontrarem uma solução que torne esse bloco válido, eles "ganham" essa recompensa porque seu bloco bem-sucedido é adicionado ao blockchain global e a transação de recompensa que eles incluíram torna-se gastável. ((("mining pools", "operation of")))Jing, que participa de um pool de mineração, configurou seu software para criar novos blocos que atribuem a recompensa a um endereço de pool. A partir daí, uma parte da recompensa é distribuída para Jing e outros mineiros na proporção da quantidade de trabalho que eles contribuíram na última rodada.

((("candidate blocks")))((("blocks", "candidate blocks")))A transação de Alice foi captada pela rede e incluída no pool de transações não verificadas. Depois de validado pelo software de mineração, ele foi incluído em um novo bloco, denominado _bloco de candidato_, gerado pelo pool de mineração de Jing. Todos os mineiros que participam desse pool de mineração começam imediatamente a calcular a Prova-de-Trabalho para o bloco candidato. Aproximadamente cinco minutos depois que a transação foi transmitida pela primeira vez pela carteira de Alice, um dos mineiros ASIC de Jing encontrou uma solução para o bloco candidato e a anunciou para a rede. Assim que outros mineiros validaram o bloco vencedor, eles começaram a corrida para gerar o próximo bloco.

O bloco vencedor de Jing tornou-se parte do blockchain como bloco #277316, contendo 419 transações, incluindo a transação de Alice. O bloco contendo a transação de Alice é contado como uma "confirmação" dessa transação.

[TIP]
====
Você pode ver o bloco que inclui https://blockchain.info/btc/block/277316[transação de Alice].
====

((("confirmations", "role in transactions")))Aproximadamente 19 minutos depois, um novo bloco, #277317, é extraído por outro minerador. Como esse novo bloco foi construído sobre o bloco nº 277316 que continha a transação de Alice, ele adicionou ainda mais computação ao blockchain, fortalecendo assim a confiança nessas transações. Cada bloco extraído sobre aquele que contém a transação conta como uma confirmação adicional para a transação de Alice. À medida que os blocos se amontoam, fica exponencialmente mais difícil reverter a transação, tornando-a cada vez mais confiável para a rede.

((("genesis block")))((("blocks", "genesis block")))((("blockchain (the)", "genesis block")))No diagrama em <<block-alice1>>, podemos ver o bloco # 277316, que contém a transação de Alice. Abaixo dele estão 277.316 blocos (incluindo o bloco nº 0), ligados uns aos outros em uma cadeia de blocos (blockchain) até o bloco nº 0, conhecido como _bloco de gênese_. Com o tempo, conforme a "altura" nos blocos aumenta, também aumenta a dificuldade de cálculo de cada bloco e da cadeia como um todo. Os blocos extraídos após aquele que contém a transação de Alice agem como garantia adicional, pois acumulam mais computação em uma cadeia cada vez mais longa. Por convenção, qualquer bloco com mais de seis confirmações é considerado irrevogável, porque exigiria uma quantidade imensa de computação para invalidar e recalcular seis blocos. Examinaremos o processo de mineração e a maneira como ele cria confiança com mais detalhes em <<mining>>.((("", startref="BToverview02")))((("", startref="MACover02")))

[[block-alice1]]
.Transação de Alice incluída no bloco #277316
image::images/mbc2_0209.png["Alice's transaction included in a block"]

=== Gastando a Transação

((("spending bitcoin", "simplified-payment-verification (SPV)")))((("simplified-payment-verification (SPV)")))Agora que a transação de Alice foi incorporada ao blockchain como parte de um bloco, ela faz parte do livro-razão distribuído do bitcoin e fica visível para todos os aplicativos bitcoin. Cada cliente bitcoin pode verificar de forma independente a transação como válida e utilizável. Os clientes de nó completo podem rastrear a origem dos fundos desde o momento em que o bitcoin foi gerado pela primeira vez em um bloco, de forma incremental de uma transação para outra, até chegarem ao endereço de Bob. Clientes leves podem fazer o que é chamado de verificação de pagamento simplificada (veja <<spv_nodes>>) confirmando que a transação está no blockchain e tem vários blocos minerados depois dela, garantindo assim que os mineiros a aceitaram como válida.

Bob agora pode gastar o resultado dessa e de outras transações. Por exemplo, Bob pode pagar a um contratante ou fornecedor transferindo o valor do pagamento da xícara de café de Alice para esses novos proprietários. Muito provavelmente, o software bitcoin de Bob agregará muitos pagamentos pequenos em um pagamento maior, talvez concentrando todas as receitas de bitcoin do dia em uma única transação. Isso agregaria os vários pagamentos em uma única saída (e um único endereço). Para um diagrama de uma transação de agregação, veja <<transaction-aggregating>>.

À medida que Bob gasta os pagamentos recebidos de Alice e de outros clientes, ele estende a cadeia de transações. Vamos supor que Bob pague seu web designer Gopesh((("use cases", "offshore contract services"))) em Bangalore para uma nova página da web. Agora, a cadeia de transações parecerá <<block-alice2>>.

[[block-alice2]]
.A transação de Alice como parte de uma cadeia de transações de Joe para Gopesh
image::images/mbc2_0210.png["Alice's transaction as part of a transaction chain"]

Neste capítulo, vimos como as transações criam uma cadeia que move valor de proprietário para proprietário. Também rastreamos a transação de Alice, desde o momento em que foi criada em sua carteira, por meio da rede bitcoin e até os mineiros que a gravaram no blockchain. No restante deste livro, examinaremos as tecnologias específicas por trás de carteiras, endereços, assinaturas, transações, rede e, finalmente, mineração.((("", startref="BCover02")))((("", startref="DCSover02"))) ((("", startref="UCcoffee02")))
