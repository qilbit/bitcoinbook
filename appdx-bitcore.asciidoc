[[appdx_bitcore]]
[appendix]

== Bitcore


((("Bitcore", id="bitcore16")))Bitcore é um conjunto de ferramentas fornecido pelo BitPay. Seu objetivo é fornecer ferramentas fáceis de usar para desenvolvedores de Bitcoin. Quase todo o código do Bitcore é escrito em JavaScript. Existem alguns módulos escritos especificamente para NodeJS. Finalmente, o módulo "nó" do Bitcore inclui o código C ++ do Bitcoin Core. Por favor, veja https://bitcore.io para maiores informações.

=== Lista de Recursos do Bitcore

* Nó completo de Bitcoin (nó de bitcore)
* Explorador de blocos (insight)
* Utilitários de bloco, transação e carteira (bitcore-lib)
* Comunicando-se diretamente com a rede P2P do Bitcoin (bitcore-p2p)
* Geração mnemônica da entropia seed (bitcore-mnemonic)
* Protocolo de pagamento (bitcore-payment-protocol)
* Verificação e assinatura de mensagens (bitcore-message)
* Esquema de Criptografia Integrado de curva Elíptica (bitcore-ecies)
* Serviço de carteira (bitcore-wallet-service)
* Cliente da carteira (bitcore-wallet-client)
* Integrando serviços diretamente com Bitcoin Core (bitcore-node)

=== Exemplos de Biblioteca Bitcore

==== Pré-requisitos

* NodeJS >= 4.x

Se estiver usando NodeJS e o nó REPL:

[source,bash]
----
$ npm install -g bitcore-lib bitcore-p2p
----

==== Exemplos de carteira usando bitcore-lib

Criação de um novo endereço bitcoin com chave privada associada:

----
> bitcore = require('bitcore-lib')
> privateKey = new bitcore.PrivateKey()
> address = privateKey.toAddress().toString()
----

Criação de uma chave privada determinística hierárquica e endereço:

----
> hdPrivateKey = bitcore.HDPrivateKey()
> hdPublicKey = bitcore.HDPublicKey(hdPrivateKey)
> hdAddress = new bitcore.Address(hdPublicKey.publicKey).toString()
----

Criação e assinatura de uma transação de um UTXO:

----
> utxo = {
  txId: transaction id containing an unspent output,
  outputIndex: output index e.g. 0,
  address: addressOfUtxo,
  script: bitcore.Script.buildPublicKeyHashOut(addressOfUtxo).toString(),
  satoshis: amount sent to the address
}
> fee = 3000 //set appropriately for conditions on the network
> tx = new bitcore.Transaction()
        .from(utxo)
        .to(address, 35000)
        .fee(fee)
        .enableRBF()
        .sign(privateKeyOfUtxo)
----

Substitua a última transação no mempool (substituição por taxa):

----
> rbfTx = new Transaction()
           .from(utxo)
           .to(address, 35000)
           .fee(fee*2)
           .enableRBF()
           .sign(privateKeyOfUtxo);
> tx.serialize();
> rbfTx.serialize();
----

Transmitindo uma transação para a rede Bitcoin
(nota: transmita apenas transações válidas; referir-se https://bitnodes.21.co/nodes[] para hosts pares):

1. Copie o código abaixo em um arquivo chamado _broadcast.js_.
2. As variáveis ​​+tx+ e +rbfTx+ são a saída de +tx.serialize()+ e +rbfTx.serialize()+, respectivamente.
3. Para substituir por taxa, o par deve suportar a opção bitcoind +mempoolreplace+ e configurá-la para +1+.
4. Execute o nó do arquivo _broadcast.js_((("", startref="bitcore16"))):

----
var p2p = require('bitcore-p2p');
var bitcore = require('bitcore-lib');
var tx = new bitcore.Transaction('output from serialize function');
var rbfTx = new bitcore.Transaction('output from serialize function');
var host = 'ip address'; //use valid peer listening on tcp 8333
var peer = new p2p.Peer({host: host});
var messages = new p2p.Messages();
peer.on('ready', function() {
  var txs = [messages.Transaction(tx), messages.Transaction(rbfTx)];
  var index = 0;
  var interval = setInterval(function() {
    peer.sendMessage(txs[index++]);
    console.log('tx: ' + index + ' sent');
    if (index === txs.length) {
      clearInterval(interval);
      console.log('disconnecting from peer: ' + host);
      peer.disconnect();
    }
  }, 2000);
});
peer.connect();
----
